=== Первый этап ===
1. При запуске с неустановленной локалью надо уметь
   получать системную локаль и ориентироваться на неё
   (из файла /etc/sysconfig/i18n, LANG?)
2. Уметь получать кодировку названий файлов
   (внутреннюю кодировку системы) - на основании п.1
3. Обеспечить выставление G_FILESYSTEM_ENCODING=?

=== Второй этап ===
Определить отношения с локалью:
1. При запуске с локалью ориентироваться на LANG? LC_CTYPE?
   и определять кодировку из него?

// Автоматически формировать таблицу на основе NLS (exe-программа,
// запускаемая в WINE/Win: по перечню локалей прогонять и получать lcid и кодировки

// Получать lcid, из которого по таблице - остальные кодировки.

	
	/* TODO:
	 * Статический массив формируется программой под WINE
	 * Что у нас с многопоточностью?
	 * Программа должна компилироваться на любой системе
	 * locale (из списка локалей в системе)
	 * All charset должны быть правильными для iconv: контролировать
	 * lcid (получаем из locale get_env_lcid)
	 *    из lcid получаем _cp
	 * charset'ы (преобразованные по таблице в обратную сторону из _cp)
	 * тут быть внимательным с локалью UTF-8
	 * win_cs (из ansi_cp)
	 * dos_cs (из oem_cp)
	 * mac_cs (из mac_cp)
	 * проверять наличие некоторых крайних локалей (вдруг в тестовой системе не все)
	 * Всё должно работать и без указания кодировки в локали (по крайней мере для не unix)
	 * Выкидывать неалфавитные знаки из названия локали (а каково будет iocharset? nls в ядре?)
	 * /usr/lib/locale. Без указания кодировки у каждой локали есть своя умолчальная кодировка
	 * Ищем указанную локаль в списке, если не нашли, ищем в списке кодировку этой локали,
	 * из найденной записи извлекаем нужную кодировку.
	 */ 

// Sorted by locale TO BE!!!
static const struct charset_entry
{
    const char *locale;
    unsigned int lcid;
	const char *unix_cs;
	const char *win_cs;
	const char *dos_cs;
	const char *mac_cs;
} charset_relation[] =
{
	/* unix locale, 	lcid,	unix,		windows,	dos,	mac charset */
    { "ru_RU.CP1251",	1250,	"CP1251",	"CP1251",	"CP866",	"" },
    { "ru_RU.ISO88595",	950,	"ISO88595",	"CP1251",	"CP866",	"" },
    { "ru_RU.KOI8R",	950,	"KOI8R",	"CP1251",	"CP866",	"" },
    { "ru_RU.UTF8",		950,	"UTF8",		"CP1251",	"CP866",	"" },
    { "uk_UA.CP1251",	1250,	"CP1251",	"CP1251",	"CP866",	"" },
// Должны быть:
// ANSIX341968
// ASCII
};

