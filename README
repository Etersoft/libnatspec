    LIBNATSPEC
	The Nation Specifity Library
	Vitaly Lipatov <lav@etersoft.ru>

== About libnatspec ===

libnatspec is a collection of function for requiest various
charsets - from host system, from other system.
It work in Linux and no test done in other Unix-like system.
The libnatspec allows applications to be written that are
distro independent. It contains table with relation between
locale name and encoding.

This distribution contains library, header files and binding
to other languages as python.

=== Installation ===

Installation instructions are found in INSTALL.
For RPM-based system you can use libnatspec.spec as example.

=== More Information ===

libnatspec also has a web page, at http://etersoft.ru/natspec.
New versions of the package can be found on the ftp site
ftp://ftp.altlinux.ru/pub/people/lav/natspec or the http site
http://etersoft.ru/download/natspec

libnatspec may be freely distibuted and modified in accordance with
the GNU Lesser General Public License.  Examplesin the libnatspec
distribution can fall under different licenses;
see the individual files for details.

The person for contact is Vitaly Lipatov <lav@etersoft.ru>

=== Example of use ===

==== Convert from other system to our ====
// Get the filename encoding in your system
const char *fileenc = natspec_get_filename_encoding("");

// Get the filename encoding in other system WIN
const char *win_cs = natspec_get_charset_by_locale(NATSPEC_WINCS,"");

// Do conversion from foreign to local filename encoding
const char * unix_filename = natspec_convert(win_filename,win_cs, fileenc);


==== Using in .c files ====

#ifdef HAVE_NATSPEC
#include <natspec.h>
#endif
...
#ifdef HAVE_NATSPEC
	some with natspec using
#endif



==== In russian: koi8-r ====

Основные черты:
	 * Статический массив формируется программой под WINE
	 * locale (из списка локалей в системе)
	 * All charset должны быть правильными для iconv: контролировать
	 * lcid (получаем из locale get_env_lcid)
	 * из lcid получаем _cp
	 * charset'ы (преобразованные по таблице в обратную сторону из _cp)
	 * тут быть внимательным с локалью UTF-8
	 * win_cs (из ansi_cp)
	 * dos_cs (из oem_cp)
	 * mac_cs (из mac_cp)

Частично алгоритм:
	 * Всё должно работать и без указания кодировки в локали (по крайней мере для не unix)
	 * Выкидывать неалфавитные знаки из названия локали (а каково будет iocharset? nls в ядре?)
	 * /usr/lib/locale. Без указания кодировки у каждой локали есть своя умолчальная кодировка
	 * Ищем указанную локаль в списке, если не нашли, ищем в списке кодировку этой локали,
	 * из найденной записи извлекаем нужную кодировку.

